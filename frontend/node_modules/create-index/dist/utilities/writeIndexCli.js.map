{"version":3,"sources":["../../src/utilities/writeIndexCli.js"],"names":["directoryPaths","options","sortedDirectoryPaths","outputFile","updateIndex","chalk","green","red","recursive","ignoreUnsafe","extensions","_","map","directory","fileName","silent","flatten","uniq","reverse","join","filter","directoryPath","forEach","existingIndexCode","config","siblings","ignoreDirectories","indexCode","banner","indexFilePath","path","resolve","fs","readFileSync","writeFileSync","yellow"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport chalk from 'chalk';\nimport createIndexCode from './createIndexCode';\nimport validateTargetDirectory from './validateTargetDirectory';\nimport readDirectory from './readDirectory';\nimport readIndexConfig from './readIndexConfig';\nimport sortByDepth from './sortByDepth';\nimport log from './log';\nimport findIndexFiles from './findIndexFiles';\n\nexport default (directoryPaths, options = {}) => {\n  let sortedDirectoryPaths;\n\n  sortedDirectoryPaths = sortByDepth(directoryPaths);\n\n  log('Target directories', sortedDirectoryPaths);\n  log('Output file', options.outputFile);\n  if (options.updateIndex) {\n    log('Update index:', options.updateIndex ? chalk.green('true') : chalk.red('false'));\n  } else {\n    log('Recursive:', options.recursive ? chalk.green('true') : chalk.red('false'));\n    log('Ignore unsafe:', options.ignoreUnsafe ? chalk.green('true') : chalk.red('false'));\n    log('Extensions:', chalk.green(options.extensions));\n  }\n\n  if (options.updateIndex || options.recursive) {\n    sortedDirectoryPaths = _.map(sortedDirectoryPaths, (directory) => {\n      return findIndexFiles(directory, {\n        fileName: options.updateIndex ? options.outputFile || 'index.js' : '*',\n        silent: options.updateIndex || options.ignoreUnsafe,\n      });\n    });\n    sortedDirectoryPaths = _.flatten(sortedDirectoryPaths);\n    sortedDirectoryPaths = _.uniq(sortedDirectoryPaths);\n    sortedDirectoryPaths = sortByDepth(sortedDirectoryPaths);\n\n    log('Updating index files in:', sortedDirectoryPaths.reverse().join(', '));\n  }\n\n  sortedDirectoryPaths = sortedDirectoryPaths.filter((directoryPath) => {\n    return validateTargetDirectory(directoryPath, {outputFile: options.outputFile,\n      silent: options.ignoreUnsafe});\n  });\n\n  _.forEach(sortedDirectoryPaths, (directoryPath) => {\n    let existingIndexCode;\n\n    const config = readIndexConfig(directoryPath, options);\n\n    const siblings = readDirectory(directoryPath, {\n      config,\n      extensions: options.extensions,\n      ignoreDirectories: options.ignoreDirectories,\n      silent: options.ignoreUnsafe,\n    });\n\n    const indexCode = createIndexCode(siblings, {\n      banner: options.banner,\n      config,\n    });\n\n    const indexFilePath = path.resolve(directoryPath, options.outputFile || 'index.js');\n\n    try {\n      existingIndexCode = fs.readFileSync(indexFilePath, 'utf8');\n\n      /* eslint-disable no-empty */\n    } catch {\n\n    }\n\n    /* eslint-enable no-empty */\n\n    fs.writeFileSync(indexFilePath, indexCode);\n\n    if (existingIndexCode && existingIndexCode === indexCode) {\n      log(indexFilePath, chalk.yellow('[index has not changed]'));\n    } else if (existingIndexCode && existingIndexCode !== indexCode) {\n      log(indexFilePath, chalk.green('[updated index]'));\n    } else {\n      log(indexFilePath, chalk.green('[created index]'));\n    }\n  });\n\n  log('Done');\n};\n"],"file":"writeIndexCli.js"}