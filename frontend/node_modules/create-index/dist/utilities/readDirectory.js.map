{"version":3,"sources":["../../src/utilities/readDirectory.js"],"names":["hasNoExtension","fileName","matches","match","hasMultipleExtensions","length","isSafeName","test","stripExtension","pos","lastIndexOf","slice","Math","max","removeDuplicates","files","preferredExtension","_","filter","withoutExtension","mainAlternative","includes","removeIgnoredFiles","ignorePatterns","patterns","map","pattern","startsWith","endsWith","patternWithoutSlashes","RegExp","directoryPath","options","extensions","config","ignoreDirectories","children","fs","readdirSync","absolutePath","path","resolve","isDirectory","statSync","outputFile","some","extension","ignore","sort"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,cAAc,GAAIC,QAAD,IAAc;AACnC,QAAMC,OAAO,GAAGD,QAAQ,CAACE,KAAT,CAAe,KAAf,CAAhB;AAEA,SAAO,CAACD,OAAR;AACD,CAJD;;AAMA,MAAME,qBAAqB,GAAIH,QAAD,IAAc;AAC1C,QAAMC,OAAO,GAAGD,QAAQ,CAACE,KAAT,CAAe,KAAf,CAAhB;AAEA,SAAOD,OAAO,IAAIA,OAAO,CAACG,MAAR,GAAiB,CAAnC;AACD,CAJD;;AAMA,MAAMC,UAAU,GAAIL,QAAD,IAAc;AAC/B,SAAO,kBAAkBM,IAAlB,CAAuBN,QAAvB,CAAP;AACD,CAFD;;AAIA,MAAMO,cAAc,GAAIP,QAAD,IAAc;AACnC,QAAMQ,GAAG,GAAGR,QAAQ,CAACS,WAAT,CAAqB,GAArB,CAAZ;;AAEA,MAAID,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,WAAOR,QAAP;AACD;;AAED,SAAOA,QAAQ,CAACU,KAAT,CAAe,CAAf,EAAkBC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,GAAZ,CAAlB,CAAP;AACD,CARD;;AAUA,MAAMK,gBAAgB,GAAG,CAACC,KAAD,EAAQC,kBAAR,KAA+B;AACtD,SAAOC,gBAAEC,MAAF,CAASH,KAAT,EAAiBd,QAAD,IAAc;AACnC,UAAMkB,gBAAgB,GAAGX,cAAc,CAACP,QAAD,CAAvC;AACA,UAAMmB,eAAe,GAAGD,gBAAgB,GAAG,GAAnB,GAAyBH,kBAAjD;;AAEA,QAAII,eAAe,KAAKnB,QAAxB,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,WAAO,CAACgB,gBAAEI,QAAF,CAAWN,KAAX,EAAkBK,eAAlB,CAAR;AACD,GATM,CAAP;AAUD,CAXD;;AAaA,MAAME,kBAAkB,GAAG,UAACP,KAAD,EAAgC;AAAA,MAAxBQ,cAAwB,uEAAP,EAAO;;AACzD,MAAIA,cAAc,CAAClB,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,WAAOU,KAAP;AACD;;AAED,QAAMS,QAAQ,GAAGD,cAAc,CAACE,GAAf,CAAoBC,OAAD,IAAa;AAC/C,QAAIT,gBAAEU,UAAF,CAAaD,OAAb,EAAsB,GAAtB,KAA8BT,gBAAEW,QAAF,CAAWF,OAAX,EAAoB,GAApB,CAAlC,EAA4D;AAC1D,YAAMG,qBAAqB,GAAGH,OAAO,CAACf,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAA9B;AAEA,aAAO,IAAImB,MAAJ,CAAWD,qBAAX,CAAP;AACD;;AAED,WAAO,IAAIC,MAAJ,CAAWJ,OAAX,CAAP;AACD,GARgB,CAAjB;AAUA,SAAOT,gBAAEC,MAAF,CAASH,KAAT,EAAiBd,QAAD,IAAc;AACnC,QAAIyB,OAAJ;;AAEA,SAAKA,OAAL,IAAgBF,QAAhB,EAA0B;AACxB,UAAIvB,QAAQ,CAACE,KAAT,CAAeuB,OAAf,MAA4B,IAAhC,EAAsC;AACpC,eAAO,KAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,GAVM,CAAP;AAWD,CA1BD;;eA4Be,kBAACK,aAAD,EAAiC;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAC9C,MAAI,CAAC,sCAAwBD,aAAxB,EAAuCC,OAAvC,CAAL,EAAsD;AACpD,WAAO,KAAP;AACD;;AAH6C,8BAS1CA,OAT0C,CAM5CC,UAN4C;AAAA,QAM5CA,UAN4C,oCAM/B,CAAC,IAAD,CAN+B;AAAA,0BAS1CD,OAT0C,CAO5CE,MAP4C;AAAA,QAO5CA,MAP4C,gCAOnC,EAPmC;AAAA,gCAS1CF,OAT0C,CAQ5CG,iBAR4C;AAAA,QAQ5CA,iBAR4C,sCAQxB,KARwB;AAW9C,MAAIC,QAAJ;AAEAA,EAAAA,QAAQ,GAAGC,YAAGC,WAAH,CAAeP,aAAf,CAAX;AAEAK,EAAAA,QAAQ,GAAGnB,gBAAEC,MAAF,CAASkB,QAAT,EAAoBnC,QAAD,IAAc;AAC1C,UAAMsC,YAAY,GAAGC,cAAKC,OAAL,CAAaV,aAAb,EAA4B9B,QAA5B,CAArB;;AACA,UAAMyC,WAAW,GAAGL,YAAGM,QAAH,CAAYJ,YAAZ,EAA0BG,WAA1B,EAApB;;AAEA,QAAI,CAACpC,UAAU,CAACL,QAAD,CAAf,EAA2B;AACzB,aAAO,KAAP;AACD;;AAED,QAAID,cAAc,CAACC,QAAD,CAAd,IAA4B,CAACyC,WAAjC,EAA8C;AAC5C,aAAO,KAAP;AACD;;AAED,QAAItC,qBAAqB,CAACH,QAAD,CAAzB,EAAqC;AACnC,aAAO,KAAP;AACD;;AAED,QAAIgB,gBAAEU,UAAF,CAAa1B,QAAb,EAAuB+B,OAAO,CAACY,UAAR,IAAsB,UAA7C,CAAJ,EAA8D;AAC5D,aAAO,KAAP;AACD;;AAED,QAAI,CAACF,WAAD,IAAgB,CAACT,UAAU,CAACY,IAAX,CAAiBC,SAAD,IAAe;AAClD,aAAO7B,gBAAEW,QAAF,CAAW3B,QAAX,EAAqB,MAAM6C,SAA3B,CAAP;AACD,KAFoB,CAArB,EAEI;AACF,aAAO,KAAP;AACD;;AAED,QAAIJ,WAAW,KAAK,CAAC,uBAASH,YAAT,EAAuBP,OAAvB,CAAD,IAAoCG,iBAAzC,CAAf,EAA4E;AAC1E,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GA/BU,CAAX;AAiCAC,EAAAA,QAAQ,GAAGtB,gBAAgB,CAACsB,QAAD,EAAWH,UAAU,CAAC,CAAD,CAArB,CAA3B;AACAG,EAAAA,QAAQ,GAAGd,kBAAkB,CAACc,QAAD,EAAWF,MAAM,CAACa,MAAlB,CAA7B;AAEA,SAAOX,QAAQ,CAACY,IAAT,EAAP;AACD,C","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport hasIndex from './hasIndex';\nimport validateTargetDirectory from './validateTargetDirectory';\n\nconst hasNoExtension = (fileName) => {\n  const matches = fileName.match(/\\./g);\n\n  return !matches;\n};\n\nconst hasMultipleExtensions = (fileName) => {\n  const matches = fileName.match(/\\./g);\n\n  return matches && matches.length > 1;\n};\n\nconst isSafeName = (fileName) => {\n  return /^[_a-z][\\w.]*$/i.test(fileName);\n};\n\nconst stripExtension = (fileName) => {\n  const pos = fileName.lastIndexOf('.');\n\n  if (pos === -1) {\n    return fileName;\n  }\n\n  return fileName.slice(0, Math.max(0, pos));\n};\n\nconst removeDuplicates = (files, preferredExtension) => {\n  return _.filter(files, (fileName) => {\n    const withoutExtension = stripExtension(fileName);\n    const mainAlternative = withoutExtension + '.' + preferredExtension;\n\n    if (mainAlternative === fileName) {\n      return true;\n    }\n\n    return !_.includes(files, mainAlternative);\n  });\n};\n\nconst removeIgnoredFiles = (files, ignorePatterns = []) => {\n  if (ignorePatterns.length === 0) {\n    return files;\n  }\n\n  const patterns = ignorePatterns.map((pattern) => {\n    if (_.startsWith(pattern, '/') && _.endsWith(pattern, '/')) {\n      const patternWithoutSlashes = pattern.slice(1, -1);\n\n      return new RegExp(patternWithoutSlashes);\n    }\n\n    return new RegExp(pattern);\n  });\n\n  return _.filter(files, (fileName) => {\n    let pattern;\n\n    for (pattern of patterns) {\n      if (fileName.match(pattern) !== null) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n};\n\nexport default (directoryPath, options = {}) => {\n  if (!validateTargetDirectory(directoryPath, options)) {\n    return false;\n  }\n\n  const {\n    extensions = ['js'],\n    config = {},\n    ignoreDirectories = false,\n  } = options;\n\n  let children;\n\n  children = fs.readdirSync(directoryPath);\n\n  children = _.filter(children, (fileName) => {\n    const absolutePath = path.resolve(directoryPath, fileName);\n    const isDirectory = fs.statSync(absolutePath).isDirectory();\n\n    if (!isSafeName(fileName)) {\n      return false;\n    }\n\n    if (hasNoExtension(fileName) && !isDirectory) {\n      return false;\n    }\n\n    if (hasMultipleExtensions(fileName)) {\n      return false;\n    }\n\n    if (_.startsWith(fileName, options.outputFile || 'index.js')) {\n      return false;\n    }\n\n    if (!isDirectory && !extensions.some((extension) => {\n      return _.endsWith(fileName, '.' + extension);\n    })) {\n      return false;\n    }\n\n    if (isDirectory && (!hasIndex(absolutePath, options) || ignoreDirectories)) {\n      return false;\n    }\n\n    return true;\n  });\n\n  children = removeDuplicates(children, extensions[0]);\n  children = removeIgnoredFiles(children, config.ignore);\n\n  return children.sort();\n};\n"],"file":"readDirectory.js"}