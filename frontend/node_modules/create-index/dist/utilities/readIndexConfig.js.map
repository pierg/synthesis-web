{"version":3,"sources":["../../src/utilities/readIndexConfig.js"],"names":["directoryPath","options","indexPath","path","resolve","outputFile","indexContents","fs","readFileSync","found","match","CREATE_INDEX_PATTERN","configLine","trim","length","config","JSON","parse","Error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;eAEe,kBAACA,aAAD,EAAiC;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAC9C,MAAI,CAAC,uBAASD,aAAT,EAAwBC,OAAxB,CAAL,EAAuC;AACrC,WAAO,EAAP;AACD;;AAED,QAAMC,SAAS,GAAGC,cAAKC,OAAL,CAAaJ,aAAb,EAA4BC,OAAO,CAACI,UAAR,IAAsB,UAAlD,CAAlB;;AACA,QAAMC,aAAa,GAAGC,YAAGC,YAAH,CAAgBN,SAAhB,EAA2B,OAA3B,CAAtB;;AACA,QAAMO,KAAK,GAAGH,aAAa,CAACI,KAAd,CAAoBC,+BAApB,CAAd;AACA,QAAMC,UAAU,GAAG,OAAOH,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAApB,GAA+BA,KAAK,CAAC,CAAD,CAAL,CAASI,IAAT,EAA/B,GAAiD,EAApE;;AAEA,MAAID,UAAU,CAACE,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAO,EAAP;AACD;;AAED,MAAIC,MAAJ;;AAEA,MAAI;AACFA,IAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAT;AACD,GAFD,CAEE,MAAM;AACN,UAAM,IAAIM,KAAJ,CACJ,MAAMhB,SAAN,GAAkB,4CAAlB,GACA,4CAFI,CAAN;AAID;;AAED,SAAOa,MAAP;AACD,C","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport hasIndex from './hasIndex';\nimport {CREATE_INDEX_PATTERN} from './constants';\n\nexport default (directoryPath, options = {}) => {\n  if (!hasIndex(directoryPath, options)) {\n    return {};\n  }\n\n  const indexPath = path.resolve(directoryPath, options.outputFile || 'index.js');\n  const indexContents = fs.readFileSync(indexPath, 'utf-8');\n  const found = indexContents.match(CREATE_INDEX_PATTERN);\n  const configLine = typeof found[1] === 'string' ? found[1].trim() : '';\n\n  if (configLine.length === 0) {\n    return {};\n  }\n\n  let config;\n\n  try {\n    config = JSON.parse(configLine);\n  } catch {\n    throw new Error(\n      '\"' + indexPath + '\" contains invalid configuration object.\\n' +\n      'Configuration object must be a valid JSON.',\n    );\n  }\n\n  return config;\n};\n"],"file":"readIndexConfig.js"}